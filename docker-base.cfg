# Copy of rhaptos-base.cfg with a bunch of stripped out non-functional bits
[buildout]
extends = 
    rhaptos-versions.cfg
    
versions = versions
download-cache = ${buildout:directory}/downloads

parts =
    plone
    zope2
    productdistros
    egenix-source
    psycopg2
    instance
    zeoserver
    jing
    tmp

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://pypi.rhaptos.org
    http://dist.rhaptos.org/simple
    https://packages.cnx.org/legacy
    http://public.upfronthosting.co.za/eggs
    https://downloads.egenix.com/python/index/ucs4/
    http://effbot.org/media/downloads/elementtree-1.2.7-20070827-preview.zip

index = https://pypi.python.org/simple/

eggs-directory = ${buildout:directory}/eggs

# Add additional eggs here
# elementtree is required by Plone
eggs =
    Products.RhaptosSite
    Pillow
    demjson
    Products.PloneHotfix20110531
    Products.PloneHotfix20110720
    Products.PloneHotfix20121106
    Products.PloneHotfix20130618==1.1
    Products.Zope_Hotfix_CVE_2010_3198
    rhaptos.mathjax
    rhaptos.atompub.plone
    rhaptos.swordservice.plone
    egenix_mx_base

# Data directories are set here. This is necessary in order to store the Zope and PostgreSQL data
# in a top level /data directory instead of inside the buildout dir.

zope-datadir = ${buildout:directory}
# for the production instances, we put the Zope data on a separate EBS volume as defined in production.cfg
# zope-datadir = /data/zope/


[shared]
user = admin:admin
effective-user = zope
debug-mode = off
verbose-security = off
zserver-threads = 2
zodb-cache-size = 5000
scripts-dir = ${buildout:directory}/scripts
environment-vars =
    SCRIPTSDIR ${shared:scripts-dir}
    OOCONVERT ${shared:scripts-dir}/ooconvert_unoconv.sh
    LATEXIMPORT ${shared:scripts-dir}/LatexImport.bash
    JING_JAR ${buildout:directory}/parts/jing/bin/jing.jar
pgsql_db_name = rhaptos_dev_db
pgsql_db_port = 5555
data_url = http://ds.rhaptos.org/rhaptos_partial
portal-name = site
zeo-port = 8100
zope-conf-additional = 
    %import Products.ClockServer
    <clock-server>
        method /${shared:portal-name}/queue_tool/clockTick
        period 3
        user
        password 
    </clock-server>
    <zodb_db pdfs>
        # pdfs database
        cache-size 5000
        # ZEOStorage database
        <zeoclient>
             server ${shared:zeo-port}
             storage 2
             name pdfs
             var ${buildout:directory}/var
             cache-size 30MB
        </zeoclient>
        mount-point /${shared:portal-name}/pdfs
     </zodb_db>
backup-server = backups.cnx.org
backup-directory = /mnt/backups/backups
# latest or of the form 2010_Apr_01
backup-date = latest 

# If you want Zope to know about any additional eggs, list them here.
# This should include any development eggs you listed in develop-eggs above,
# e.g. eggs = Plone my.package
eggs = ${buildout:eggs}
    
# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml =

products =
    ${buildout:directory}/products
    ${productdistros:location}
    ${plone:location}


[plone]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.distros
recipe = plone.recipe.distros
urls = http://launchpad.net/plone/2.5/2.5.5/+download/Plone-2.5.5.tar.gz
nested-packages = Plone-2.5.5.tar.gz
version-suffix-packages = Plone-2.5.5.tar.gz


[zope2]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.zope2install
recipe = plone.recipe.zope2install
fake-zope-eggs = true
additional-fake-eggs = 
    ZODB3
##url = http://www.zope.org/Products/Zope/2.9.12/Zope-2.9.12-final.tgz
url = https://packages.cnx.org/legacy/Zope-2.9.12-final.tgz


# Use this section to download additional old-style Products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.distros
recipe = plone.recipe.distros
urls =
nested-packages =
version-suffix-packages =


[instance]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.zope2instance
recipe = plone.recipe.zope2instance
zope2-location = ${zope2:location}
user = ${shared:user} 
http-address = 8888
debug-mode = off
verbose-security = off
environment-vars = ${shared:environment-vars}
zope-conf-additional = ${shared:zope-conf-additional}
zserver-threads = ${shared:zserver-threads}
zodb-cache-size = ${shared:zodb-cache-size}
zeo-client = on
zeo-address = ${shared:zeo-port}

# If you want Zope to know about any additional eggs, list them here.
# This should include any development eggs you listed in develop-eggs above,
# e.g. eggs = Plone my.package
eggs = ${shared:eggs}
    
# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = 

products = ${shared:products}


[zeoserver]
recipe = plone.recipe.zope2zeoserver
zope2-location = ${zope2:location}
zeo-address = ${shared:zeo-port}
file-storage = ${buildout:zope-datadir}/var/filestorage/Data.fs
#blob-storage = ${buildout:zope-datadir}/var/blobs/
zeo-conf-additional =
    <filestorage 2>
        path ${buildout:zope-datadir}/var/filestorage/Data_pdf.fs
    </filestorage>


[jing]
recipe = hexagonit.recipe.download
url = http://jing-trang.googlecode.com/files/jing-20081028.zip
strip-top-level-dir = True
environment =
    TMP=${tmp:path}


[tmp]
recipe = ore.recipe.fs:mkdir
path = ${buildout:directory}/var/tmp


[egenix-source]
recipe = hexagonit.recipe.download
# This is where buildout will have cached it when the egg was installed
#url = file://${buildout:directory}/downloads/dist/egenix-mx-base-3.2.5.tar.gz
url = http://downloads.egenix.com/python/egenix-mx-base-3.2.5.tar.gz
strip-top-level-dir = True
environment =
    TMP=${tmp:path}


[psycopg2]
recipe = iw.recipe.cmd
on_install = true
on_update = false
cmds =
    pip install -i https://pypi.python.org/simple/ --no-install egenix-mx-base==3.2.5
    pip install -i https://pypi.python.org/simple/ --no-install --build=./build psycopg2==2.4.6
    sed -i 's;#mx_include_dir=;mx_include_dir=${buildout:directory}/parts/egenix-source/mx/DateTime/mxDateTime/;' ${buildout:directory}/build/psycopg2/setup.cfg
    pip install -i https://pypi.python.org/simple/ --no-download --build=./build psycopg2
    

# requires python-egenix-mx-base-dev and libpq-dev system packages
[psycopg1]
recipe = zc.recipe.cmmi
url = http://initd.org/psycopg/tarballs/PSYCOPG-1-1/psycopg-1.1.21.tar.gz
configure-options = --with-python=${buildout:directory}/bin/python --with-postgres-includes=/usr/include/postgresql --with-mxdatetime-includes=${buildout:directory}/parts/egenix-source/mx/DateTime/mxDateTime
